
using Data.Entities;
using Microsoft.EntityFrameworkCore;

namespace Data.Contexts;

public class DataContext(DbContextOptions<DataContext> options) : DbContext(options)
{
    public DbSet<CompanyRoleEntity> Roles { get; set; }
    public DbSet<CompanyServiceEntity> Services { get; set; }
    public DbSet<ContactPersonEntity> ContactPersons { get; set; }
    public DbSet<CurrencyEntity> Currencies { get; set; }
    public DbSet<CustomerEntity> Customers { get; set; }
    public DbSet<CustomerReferenceEntity> CustomerReferences { get; set; }
    public DbSet<EmployeeEntity> Employees { get; set; }
    public DbSet<ProjectEntity> Projects { get; set; }
    public DbSet<ProjectStatusEntity> ProjectStatuses { get; set; }
    public DbSet<TimeframeEntity> Timeframes { get; set; }
    public DbSet<UnitEntity> Units { get; set; }

    /// <summary>
    /// The CustomerReferenceEntity parts of this modelBuilder was generated by Claude AI.
    /// </summary>
    /// <param name="modelBuilder"></param>
    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<CustomerReferenceEntity>()
            .HasKey(cr => new { cr.CustomerId, cr.ContactPersonId });

        modelBuilder.Entity<CustomerReferenceEntity>()
            .HasOne(cr => cr.Customer)
            .WithMany()
            .HasForeignKey(cr => cr.CustomerId);

        modelBuilder.Entity<CustomerReferenceEntity>()
            .HasOne(cr => cr.ContactPerson)
            .WithMany()
            .HasForeignKey(cr => cr.ContactPersonId);

        modelBuilder.Entity<ContactPersonEntity>()
            .HasIndex(x => x.Email)
            .IsUnique();

        modelBuilder.Entity<EmployeeEntity>()
            .HasIndex(x => x.Email)
            .IsUnique();

        base.OnModelCreating(modelBuilder);
    }
}
